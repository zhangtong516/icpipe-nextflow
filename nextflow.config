/* Parameters for icShape running in Aquila-GIS
 *
 *
 */

params {
    pipelineVersion     = '0.0.1' // Pipeline version
    //run Info -- Need input from command laine
    params.sampleinfo = false
    params.designinfo = false
    params.runName = false
    params.outdir = false
    //params.readsPath = false

    // cluster settings -- usually fixed
    max_memory = 1024.GB
    max_cpus = 120
    max_time = 240.h



    // for ICSHAPE_pipe:
    // parameters need to be optimized
    // genome: 
    params.genome_dir = "/mnt/projects/wenm/rnaStructure/ming/database/Genome/Ensembl/Human/GRCh38/release-100/"
    // adaptor trim for icShape-pipe:
    params.adp1 = 'AGATCGGAAGAGC'
    params.adp2 = 'CTACAGTCCGACGA'
    // barcodes total length in icShape library: DDDNNATCACGNNNN-AGATCGGAAGAGCGTCGTGGA/iSp18/GGATCC...
    params.trimLength = 15 
    params.minLength = 25
    // SHAPE calulation fir icShape-pipe
    // minimum average depth and RTstop counts  per transcript
    // for 1 or 2-replicates human genome, 200 for 4-replicates human
    params.minAvgDepth = 50  
    params.minAvgRt = 2 
    params.num_hits = 5 // number of maximum mapped locations for multiple mapped reads 
    // params.minCov = -1 // minimum coverage for RTstop: set to -1 to output all bases.

    // calculate SHAPE
    params.minCov=100
    params.minRT=2
    params.minRPKM=1
    
}

process {
    executor = 'sge'
    clusterOptions = {"-l mem_free=${task.memory.toString().replaceAll(/[\sB]/,'')}"}
    penv = 'OpenMP'
    // errorStrategy = { task.attempt < 2 ? 'retry' : 'finish' }
    pollInterval = '30 sec'
    exitReadTimeout = "120 sec"

    cpus = 1
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }

    errorStrategy = { task.exitStatus in [140,143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'

    // Process-specific resource requirements
    withName:trim_adaptor {
        time = { check_max( 2.h * task.attempt, 'time') }
        cpus = { check_max(4, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
    }
    withName:collapse_reads {
        time = { check_max( 2.h * task.attempt, 'time') }
        cpus = { check_max(4, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory') }
    }
    withName:mapping_rRNA {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(12, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
    }
    withName:mapping_smallRNA {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(12, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
    }
    withName:star_mapping_genome {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(12, 'cpus') }
        memory = { check_max( 40.GB * task.attempt, 'memory') }
    }
    withName:estimate_rpkm {
        time = { check_max( 4.h * task.attempt, 'time') }
        cpus = { check_max(4, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory') }
    }
    withName:sam2tab {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(1, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
    } 
    withName:tab2gTab_single {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(1, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory') }
    } 
    withName:gTab2RTBD_single {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(8, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory') }
    } 
    withName:coverage_rt_count {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(1, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }
    withName:merge_coverage {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(1, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }
    withName:tab2gTab_merged {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(1, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory') }
    } 
    withName:calculate_shape {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(8, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
    } 
    withName:generate_bedgraph {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(1, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
    } 

    withName:mapping_genome {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(12, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
    }
    withName:salmon_quant {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(12, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory') }
    } 
    withName:collect_coverage {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(8, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory') }
    }
    withName:collect_reactivity_rpkm {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(8, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory') }
    }
    withName:merge_lanes_fastq {
        time = { check_max( 2.h * task.attempt, 'time') }
        cpus = { check_max(2, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }
    withName:trim_fastq {
        time = { check_max( 2.h * task.attempt, 'time') }
        cpus = { check_max(4, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }
    withName:star_mapping {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(4, 'cpus') }
        memory = { check_max( 32.GB * task.attempt, 'memory') }
    }
    withName:bowtie2_mappings {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(8, 'cpus') }
        memory = { check_max( 32.GB * task.attempt, 'memory') }
    }
    withName:estimate_rpkm {
        time = { check_max( 8.h * task.attempt, 'time') }
        cpus = { check_max( 8, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }
    withName:calculate_rt {
        time = { check_max( 8.h * task.attempt, 'time') }
        cpus = { check_max( 1, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }
    withName:combine_rt_replicates {
        time = { check_max( 8.h * task.attempt, 'time') }
        cpus = { check_max( 1, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }
    withName:normalize_rt {
        time = { check_max( 8.h * task.attempt, 'time') }
        cpus = { check_max( 1, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }
    withName:calculate_enrichment {
        time = { check_max( 8.h * task.attempt, 'time') }
        cpus = { check_max( 1, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }
    withName:shape_filter {
        time = { check_max( 8.h * task.attempt, 'time') }
        cpus = { check_max( 1, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }
}

// process.shell = ['/bin/bash', '-euo', 'pipefail']
process.shell = ['/bin/bash','-u']

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

